import smtplib
import logging
import sendgrid
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from app.config.settings import settings
from sendgrid.helpers.mail import Mail, From, To, Subject, PlainTextContent, HtmlContent

logger = logging.getLogger(__name__)

def send_with_sendgrid_api(to_email: str, subject: str, message: str) -> bool:
    """
    Env√≠a un email usando SendGrid API 
    """
    try:
        if not settings.SENDGRID_API_KEY:
            logger.error("SendGrid API Key no configurada")
            return False
        
        # Configurar SendGrid
        sg = sendgrid.SendGridAPIClient(api_key=settings.SENDGRID_API_KEY)
        
        # Crear el mensaje
        from_email = From(settings.FROM_EMAIL, settings.FROM_NAME)
        to_email_obj = To(to_email)
        subject_obj = Subject(subject)
        
        # Convertir texto plano a HTML b√°sico
        html_message = message.replace('\n', '<br>')
        
        content = HtmlContent(f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="text-align: center; border-bottom: 2px solid #4a90e2; padding-bottom: 20px; margin-bottom: 20px;">
                    <h1 style="color: #4a90e2; margin: 0;">{settings.FROM_NAME}</h1>
                </div>
                <div style="white-space: pre-wrap;">
                    {html_message}
                </div>
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #666; font-size: 0.9em;">
                    <p>Este es un mensaje autom√°tico, por favor no responder a este email.</p>
                </div>
            </div>
        </body>
        </html>
        """)
        
        mail = Mail(from_email, to_email_obj, subject_obj, content)
        
        # Enviar el email
        response = sg.send(mail)
        
        if response.status_code in [200, 202]:
            logger.info(f"üìß Email enviado via SendGrid a {to_email}: {subject}")
            return True
        else:
            logger.error(f"SendGrid fall√≥ con c√≥digo: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"Error al enviar email via SendGrid: {e}")
        return False

def send_with_smtp(to_email: str, subject: str, message: str) -> bool:
    """
    Env√≠a un email usando Gmail SMTP (puede fallar en Render)
    """
    try:
        # Verificar si Gmail est√° configurado
        if not settings.GMAIL_APP_PASSWORD:
            logger.warning("Gmail SMTP no configurado")
            return False
        
        # Configurar el mensaje
        msg = MIMEMultipart()
        msg['From'] = settings.GMAIL_USER
        msg['To'] = to_email
        msg['Subject'] = Header(subject, 'utf-8')
        
        # Agregar el cuerpo del mensaje con codificaci√≥n UTF-8
        msg.attach(MIMEText(message, 'plain', 'utf-8'))
        
        # Conectar al servidor SMTP de Gmail
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(settings.GMAIL_USER, settings.GMAIL_APP_PASSWORD)
        
        # Enviar el email
        text = msg.as_string()
        server.sendmail(settings.GMAIL_USER, to_email, text)
        server.quit()
        
        logger.info(f"üìß Email enviado via SMTP a {to_email}: {subject}")
        return True
        
    except Exception as e:
        logger.error(f"Error al enviar email via SMTP: {e}")
        return False

def send_email(to_email: str, subject: str, message: str) -> bool:
    """
    Env√≠a un email usando SendGrid API como m√©todo principal, con SMTP como fallback
    Ideal para despliegues en Render donde SMTP puede estar bloqueado
    """
    logger.info(f"üöÄ Iniciando env√≠o de email a {to_email}: {subject}")
    
    # 1. Intentar SendGrid API primero (recomendado para Render)
    if settings.SENDGRID_API_KEY:
        logger.info("üì° Intentando env√≠o via SendGrid API...")
        if send_with_sendgrid_api(to_email, subject, message):
            return True
        else:
            logger.warning("‚ö†Ô∏è SendGrid API fall√≥, intentando SMTP...")
    else:
        logger.info("üì° SendGrid no configurado, intentando SMTP...")
    
    # 2. Fallback a SMTP si SendGrid falla
    if send_with_smtp(to_email, subject, message):
        return True
    
    # 3. Si ambos fallan, simular env√≠o en desarrollo
    if not settings.SENDGRID_API_KEY and not settings.GMAIL_APP_PASSWORD:
        logger.warning("üìß Ning√∫n servicio de email configurado - simulando env√≠o")
        logger.info(f"üìß Email simulado a {to_email}: {subject} - {message[:100]}...")
        return True
    
    # 4. Si todo falla
    logger.error(f"‚ùå Fall√≥ el env√≠o de email a {to_email}")
    return False

def enviar_notificacion_masiva(destinatarios: list, asunto: str, mensaje: str, tipo: str = "general") -> dict:
    """
    Env√≠a notificaci√≥n masiva por email
    Retorna: {"exitosos": int, "fallidos": int}
    """
    exitosos = 0
    fallidos = 0
    
    for destinatario in destinatarios:
        try:
            # Crear mensaje personalizado seg√∫n el tipo
            mensaje_personalizado = crear_template_notificacion(tipo, mensaje)
            
            if send_email(destinatario, asunto, mensaje_personalizado):
                exitosos += 1
            else:
                fallidos += 1
                
        except Exception as e:
            logger.error(f"Error enviando email a {destinatario}: {e}")
            fallidos += 1
    
    logger.info(f"Notificaci√≥n masiva completada: {exitosos} exitosos, {fallidos} fallidos")
    return {"exitosos": exitosos, "fallidos": fallidos}

def crear_template_notificacion(tipo: str, mensaje: str) -> str:
    """
    Crea un template para el email basado en el tipo
    """
    # Configuraci√≥n de emojis por tipo
    tipo_config = {
        "general": {"emoji": "üì¢", "titulo": "Notificaci√≥n General"},
        "mantenimiento": {"emoji": "üîß", "titulo": "Mantenimiento"},
        "promocion": {"emoji": "üéâ", "titulo": "Promoci√≥n Especial"},
        "reserva": {"emoji": "üèÄ", "titulo": "Informaci√≥n de Reserva"},
        "suscripcion": {"emoji": "üìÖ", "titulo": "Informaci√≥n de Suscripci√≥n"}
    }
    
    config = tipo_config.get(tipo, tipo_config["general"])
    
    template = f"""
{config['emoji']} {config['titulo']} - Quico B√°squet

{mensaje}

---
¬øNecesitas ayuda? Contacta con nosotros:
Email: basquetquico@gmail.com

¬© 2025 Quico B√°squet. Todos los derechos reservados.
    """
    
    return template

def send_reservation_confirmation_email(user_email: str, user_name: str, reserva_data: dict, info_pago: dict) -> bool:
    """
    Env√≠a email de confirmaci√≥n de reserva
    """
    subject = "‚úÖ Confirmaci√≥n de Reserva - Quico B√°squet"
    
    if info_pago['metodo'] == 'transferencia':
        message = f"""
¬°Hola {user_name}!

Tu reserva ha sido confirmada exitosamente.

üìÖ Fecha: {reserva_data['fecha']}
‚è∞ Horario: {reserva_data['hora_inicio']} - {reserva_data['hora_fin']}
üèÄ Deporte: {reserva_data['deporte']}
üí∞ Precio: ${reserva_data['precio']}

üí≥ INFORMACI√ìN DE PAGO:
‚Ä¢ M√©todo: Transferencia bancaria
‚Ä¢ Alias: {info_pago['alias']}
‚Ä¢ CBU: {info_pago['cbu']}
‚Ä¢ Banco: {info_pago['banco']}
‚Ä¢ Titular: {info_pago['titular']}

Por favor, realiza la transferencia antes de la fecha de la reserva.

¬°Gracias por elegir Quico B√°squet!

Saludos,
El equipo de Quico B√°squet
        """
    else:
        message = f"""
¬°Hola {user_name}!

Tu reserva ha sido confirmada exitosamente.

üìÖ Fecha: {reserva_data['fecha']}
‚è∞ Horario: {reserva_data['hora_inicio']} - {reserva_data['hora_fin']}
üèÄ Deporte: {reserva_data['deporte']}
üí∞ Precio: ${reserva_data['precio']}

üíµ PAGO EN EFECTIVO:
El pago se realiza en efectivo al momento de la reserva.

¬°Gracias por elegir Quico B√°squet!

Saludos,
El equipo de Quico B√°squet
        """
    
    return send_email(user_email, subject, message)

def send_subscription_confirmation_email(user_email: str, user_name: str, suscripcion_data: dict) -> bool:
    """
    Env√≠a email de confirmaci√≥n de suscripci√≥n
    """
    subject = "‚úÖ Confirmaci√≥n de Suscripci√≥n - Quico B√°squet"
    
    # Convertir n√∫mero de d√≠a a nombre
    dias_semana = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
    dia_nombre = dias_semana[suscripcion_data['dia_semana']] if 0 <= suscripcion_data['dia_semana'] < 7 else f"D√≠a {suscripcion_data['dia_semana']}"
    
    message = f"""
¬°Hola {user_name}!

Tu suscripci√≥n ha sido creada exitosamente.

üìÖ D√≠a de la semana: {dia_nombre}
‚è∞ Horario: {suscripcion_data['hora_inicio']} - {suscripcion_data['hora_fin']}
üèÄ Deporte: {suscripcion_data['deporte']}
üí∞ Precio mensual: ${suscripcion_data['precio_mensual']}

Tu suscripci√≥n est√° activa y puedes disfrutar de tu cancha reservada.

¬°Gracias por elegir Quico B√°squet!

Saludos,
El equipo de Quico B√°squet
    """
    
    return send_email(user_email, subject, message)

def send_subscription_confirmation_email_admin(user_name: str, suscripcion_data: dict) -> bool:
    """
    Env√≠a email de confirmaci√≥n de suscripci√≥n al administrador
    """
    subject = "‚úÖ Nueva Suscripci√≥n Creada - Quico B√°squet"
    
    # Convertir n√∫mero de d√≠a a nombre
    dias_semana = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
    dia_nombre = dias_semana[suscripcion_data['dia_semana']] if 0 <= suscripcion_data['dia_semana'] < 7 else f"D√≠a {suscripcion_data['dia_semana']}"
    
    message = f"""
üîÑ NUEVA SUSCRIPCI√ìN CREADA

üìÖ D√≠a de la semana: {dia_nombre}
‚è∞ Horario: {suscripcion_data['hora_inicio']} - {suscripcion_data['hora_fin']}
üèÄ Deporte: {suscripcion_data['deporte']}
üë§ Cliente: {suscripcion_data['cliente_nombre']}
üí∞ Precio mensual: ${suscripcion_data['precio_mensual']}
üìÖ Fecha inicio: {suscripcion_data.get('fecha_inicio', 'No especificada')}
üìÖ Fecha fin: {suscripcion_data.get('fecha_fin', 'No especificada')}

üìç Creada por: {user_name}

¬°Nueva suscripci√≥n confirmada en el sistema!
    """
    
    return send_email("basquetquico@gmail.com", subject, message)

def send_subscription_cancellation_email(user_email: str, user_name: str, suscripcion_data: dict) -> bool:
    """
    Env√≠a email de cancelaci√≥n de suscripci√≥n
    """
    subject = "‚ùå Suscripci√≥n Cancelada - Quico B√°squet"
    
    # Convertir n√∫mero de d√≠a a nombre
    dias_semana = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
    dia_nombre = dias_semana[suscripcion_data['dia_semana']] if 0 <= suscripcion_data['dia_semana'] < 7 else f"D√≠a {suscripcion_data['dia_semana']}"
    
    message = f"""
¬°Hola {user_name}!

Tu suscripci√≥n ha sido cancelada.

üìÖ D√≠a de la semana: {dia_nombre}
‚è∞ Horario: {suscripcion_data['hora_inicio']} - {suscripcion_data['hora_fin']}
üèÄ Deporte: {suscripcion_data['deporte']}

Si tienes alguna pregunta o deseas reactivar tu suscripci√≥n, no dudes en contactarnos.

¬°Gracias por haber elegido Quico B√°squet!

Saludos,
El equipo de Quico B√°squet
    """
    
    return send_email(user_email, subject, message)

def send_subscription_cancellation_email_admin(user_name: str, suscripcion_data: dict) -> bool:
    """
    Env√≠a email de cancelaci√≥n de suscripci√≥n al administrador
    """
    subject = "‚ùå Suscripci√≥n Cancelada - Quico B√°squet"
    
    # Convertir n√∫mero de d√≠a a nombre
    dias_semana = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
    dia_nombre = dias_semana[suscripcion_data['dia_semana']] if 0 <= suscripcion_data['dia_semana'] < 7 else f"D√≠a {suscripcion_data['dia_semana']}"
    
    message = f"""
‚ùå SUSCRIPCI√ìN CANCELADA

üìÖ D√≠a de la semana: {dia_nombre}
‚è∞ Horario: {suscripcion_data['hora_inicio']} - {suscripcion_data['hora_fin']}
üèÄ Deporte: {suscripcion_data['deporte']}
üë§ Cliente: {suscripcion_data['cliente_nombre']}
üí∞ Precio mensual: ${suscripcion_data['precio_mensual']}

üìç Cancelada por: {user_name}

‚ö†Ô∏è Suscripci√≥n cancelada en el sistema.
    """
    
    return send_email("basquetquico@gmail.com", subject, message)

def send_subscription_renewal_email(user_email: str, user_name: str, suscripcion_data: dict, nueva_fecha_fin: str) -> bool:
    """
    Env√≠a email de renovaci√≥n de suscripci√≥n
    """
    subject = "üîÑ Suscripci√≥n Renovada - Quico B√°squet"
    
    # Convertir n√∫mero de d√≠a a nombre
    dias_semana = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
    dia_nombre = dias_semana[suscripcion_data['dia_semana']] if 0 <= suscripcion_data['dia_semana'] < 7 else f"D√≠a {suscripcion_data['dia_semana']}"
    
    message = f"""
¬°Hola {user_name}!

Tu suscripci√≥n ha sido renovada exitosamente.

üìÖ D√≠a de la semana: {dia_nombre}
‚è∞ Horario: {suscripcion_data['hora_inicio']} - {suscripcion_data['hora_fin']}
üèÄ Deporte: {suscripcion_data['deporte']}
üí∞ Precio mensual: ${suscripcion_data['precio_mensual']}
üìÖ Nueva fecha de fin: {nueva_fecha_fin}

Tu suscripci√≥n est√° activa y puedes seguir disfrutando de tu cancha reservada.

¬°Gracias por elegir Quico B√°squet!

Saludos,
El equipo de Quico B√°squet
    """
    
    return send_email(user_email, subject, message)

def send_reservation_cancellation_email(user_email: str, user_name: str, reserva_data: dict) -> bool:
    """
    Env√≠a email de cancelaci√≥n de reserva
    """
    subject = "‚ùå Reserva Cancelada - Quico B√°squet"
    
    message = f"""
¬°Hola {user_name}!

Tu reserva ha sido cancelada.

üìÖ Fecha: {reserva_data['fecha']}
‚è∞ Horario: {reserva_data['hora_inicio']} - {reserva_data['hora_fin']}
üèÄ Deporte: {reserva_data['deporte']}

Si tienes alguna pregunta o deseas hacer una nueva reserva, no dudes en contactarnos.

¬°Gracias por haber elegido Quico B√°squet!

Saludos,
El equipo de Quico B√°squet
    """
    
    return send_email(user_email, subject, message)

def send_reservation_confirmation_email_admin(user_name: str, reserva_data: dict, info_pago: dict) -> bool:
    """
    Env√≠a email de confirmaci√≥n de reserva al administrador
    """
    subject = "‚úÖ Confirmaci√≥n de Reserva - Quico B√°squet"
    
    if info_pago['metodo'] == 'transferencia':
        message = f"""
üèÄ NUEVA RESERVA CREADA

üìÖ Fecha: {reserva_data['fecha']}
‚è∞ Horario: {reserva_data['hora_inicio']} - {reserva_data['hora_fin']}
üèÄ Deporte: {reserva_data['deporte']}
üë§ Cliente: {reserva_data['cliente_nombre']}
üí∞ Precio: ${reserva_data['precio']}
üí≥ M√©todo pago: Transferencia

üìç Creada por: {user_name}

¬°Nueva reserva confirmada en el sistema!
        """
    else:
        message = f"""
üèÄ NUEVA RESERVA CREADA

üìÖ Fecha: {reserva_data['fecha']}
‚è∞ Horario: {reserva_data['hora_inicio']} - {reserva_data['hora_fin']}
üèÄ Deporte: {reserva_data['deporte']}
üë§ Cliente: {reserva_data['cliente_nombre']}
üí∞ Precio: ${reserva_data['precio']}
üí≥ M√©todo pago: Efectivo

üìç Creada por: {user_name}

¬°Nueva reserva confirmada en el sistema!
        """

    return send_email("basquetquico@gmail.com", subject, message)

def send_reservation_cancellation_email_admin(user_name: str, reserva_data: dict) -> bool:
    """
    Env√≠a email de cancelaci√≥n de reserva al administrador
    """
    subject = "‚ùå Reserva Cancelada - Quico B√°squet"
    
    message = f"""
üèÄ RESERVA CANCELADA

üìÖ Fecha: {reserva_data['fecha']}
‚è∞ Horario: {reserva_data['hora_inicio']} - {reserva_data['hora_fin']}
üèÄ Deporte: {reserva_data['deporte']}
üë§ Cliente: {reserva_data['cliente_nombre']}
üí∞ Precio: ${reserva_data['precio']}
    """

    return send_email("basquetquico@gmail.com", subject, message)